package main

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"math/rand"
	"strings"
)

type Bot struct {
	*tgbotapi.BotAPI
}

func main() {
	tgbot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	tgbot.Debug = true
	bot := &Bot{
		BotAPI: tgbot,
	}
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil { // If we got a message
			chatId := update.Message.Chat.ID

			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			text := strings.ToLower(update.Message.Text)
			photo, ok := Photos[text]
			if ok {
				bot.sendPhoto(chatId, photo)
				continue
			}

			message, ok := Messages[text]
			if ok {
				bot.sendMessage(chatId, message)
				continue
			}

			answers := []string{
				"–ü—Ä–∏–≤–µ—Ç",
				"Hi",
				"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é",
				"–ö–∞–Ω–∏—á–∏–≤–∞",
				"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
				"–ö–∞–∫ –≤–∞—à–∏ –Ω–∏—á–µ–≥–æ?",
				"–°–∞–ª–∞–º",
				"–°–∞–ª–∞–º–∞–ª–µ–π–∫—É–º",
				"Namaskaar",
				"‰Ω†Â•Ω! ",
				"ÏïàÎÖï ",
				"Sain uu?",
				"„Å©„ÅÜ„ÇÇ",
				"Sua s'dei",
				"Wai",
				"Halo",
				"Salem",
			}

			answers2 := []string{
				"–ù–æ—Ä–º–∞–ª—å–Ω–æ,—É –≤–∞—Å –∫–∞–∫?",
				"–ë—ã–≤–∞–ª–æ –∏ –ø–æ–ª—É—á—à–µ)",
				"–î–∞ –≤ —Ü–µ–ª–æ–º, –≤—Å–µ –Ω–æ—Ä–º",
				"–°–æ–π–¥–µ—Ç",
				"–Ø —Ä–∞–¥ —á—Ç–æ –≤—ã —Å–ø—Ä–æ—Å–∏–ª–∏)",
				"–î–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ,–≤—ã –∫–∞–∫?",
				"–î–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å–µ –±—ã–ª–æ –æ—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª–æ —Å—É–ø–µ—Ä)",
			}

			if text == "–ø—Ä–∏–≤–µ—Ç" {
				msg := tgbotapi.NewMessage(chatId, answers[rand.Intn(len(answers))])
				msg.ReplyMarkup = kb
				bot.Send(msg)
			} else if text == "–∫–∞–∫ –¥–µ–ª–∞?" {
				msg := tgbotapi.NewMessage(chatId, answers2[rand.Intn(len(answers2))])
				bot.Send(msg)
			} else if text == "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–æ—Å–æ–±–æ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ")
				bot.Send(msg)
			} else if text == "üîô–Ω–∞–∑–∞–¥" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üîô–Ω–∞–∑–∞–¥")
				msg.ReplyMarkup = kb
				bot.Send(msg)
			} else if text == "–∫—Ç–æ —Ç—ã?" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –∂–∏–∑–Ω–∏ –≤–∞–º")
				bot.Send(msg)
			} else if text == "—á—Ç–æ —Ç—ã?" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –∂–∏–∑–Ω–∏ –≤–∞–º")
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—è –Ω–µ –ø–æ–Ω–∏–º—é, –ø—Ä–æ—Å—Ç–∏—Ç–µüò≠")
				bot.Send(msg)
			}

		}

		if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
			if _, err := bot.Request(callback); err != nil {
				panic(err)
			}

			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Data)
			if _, err := bot.Send(msg); err != nil {
				panic(err)
			}

		}

	}

}
